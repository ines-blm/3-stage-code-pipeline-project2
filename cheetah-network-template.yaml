AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template VPC_with_PublicIPs_And_DNS: Sample template
  that creates a VPC with DNS and public IPs enabled. Note that you are billed
  for the AWS resources that you use when you create a stack from this template.

Parameters: 
  Password: 
    NoEcho: 'true'
    Type: String
    Description: New account password
    MinLength: '1'
    MaxLength: '41'
    ConstraintDescription: the password must be between 1 and 41 characters
    Default: 'Cheetah123'

  TrustedAccountId:
    Type: String

# Project2 network template
Resources:
# VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      # DependsOn: !Ref NATGateway # forcing depencing
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: project2-vpc
# PublicSubnet
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/18
      # AvailabilityZone: "eu-west-2a"
      Tags:
      - Key: Name
        Value: Public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.64.0/18
      # AvailabilityZone: "eu-west-2b"
      Tags:
      - Key: Name
        Value: Public-2
  
# InternetGateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  # Public RouteTable
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: PublicRouteTable
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable 
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable 
# PublicNetworkAcl
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
        VpcId: !Ref VPC      
  InboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PublicNetworkAcl
       RuleNumber: 100
       Protocol: -1
       Egress: false
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  OutboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PublicNetworkAcl
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  PublicSubnet1NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnet2NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl

# Private Subnet
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.128.0/19
      # AvailabilityZone: "eu-west-2a"
      Tags:
      - Key: Name
        Value: Private-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.160.0/19
      # AvailabilityZone: "eu-west-2b"
      Tags:
      - Key: Name
        Value: Private-2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.192.0/19
      # AvailabilityZone: "eu-west-2a"
      Tags:
      - Key: Name
        Value:  Private-3

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.224.0/19
      # AvailabilityZone: "eu-west-2b"
      Tags:
      - Key: Name
        Value:  Private-4
# PrivateRouteTable
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: PrivateRouteTable
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
# Public IP      
  NatPublicIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPC
    Properties:
      Domain: vpc
# Natgatway
  NatGateway: # natgateway creation
    Type: 'AWS::EC2::NatGateway'
    # DependsOn: NatPublicIP
    Properties:
      AllocationId: !GetAtt NatPublicIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable 

  PrivateSubnet4RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet4
      RouteTableId: !Ref PrivateRouteTable

# PrivateNetworkAcl
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
        VpcId: !Ref VPC      
  InboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PrivateNetworkAcl
       RuleNumber: 100
       Protocol: -1
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: PrivateNetworkAcl
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0

  PrivateSubnet1NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateSubnet2NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateSubnet3NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet3
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateSubnet4NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet4
      NetworkAclId: !Ref PrivateNetworkAcl
# IAM     
  Usergroup1:
    Type: AWS::IAM::Group
    Properties:  
      GroupName: CheetahCloudSpaceEngineersUsergroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess  
        - arn:aws:iam::362013628963:policy/Billing_Deny
  Users1:    
    Type: AWS::IAM::User     
    Properties:
      Groups: 
      - !Ref Usergroup1
      LoginProfile:
        Password: !Ref 'Password' 
        PasswordResetRequired: 'true'
      UserName: Ian
  Users2:
    Type: AWS::IAM::User          
    Properties:
      Groups:
      - !Ref Usergroup1
      LoginProfile:
        Password: !Ref 'Password' 
        PasswordResetRequired: 'true'
      UserName: Rosaria
  Users3:
    Type: AWS::IAM::User          
    Properties:
      Groups:
      - !Ref Usergroup1
      LoginProfile:
        Password: !Ref 'Password' 
        PasswordResetRequired: 'true'
      UserName: Amena
  Users4:
    Type: AWS::IAM::User          
    Properties:
      Groups:
      - !Ref Usergroup1
      LoginProfile:
        Password: !Ref 'Password' 
        PasswordResetRequired: 'true'
      UserName: Cedric
  Users5:
    Type: AWS::IAM::User          
    Properties:
      Groups:
      - !Ref Usergroup1
      LoginProfile:
        Password: !Ref 'Password' 
        PasswordResetRequired: 'true'
      UserName: Balemi
  Usergroup2:
    Type: AWS::IAM::Group
    Properties:  
      GroupName: CheetahNAS-Financial-GroupSecurity-Team
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  Users6:
    Type: AWS::IAM::User          
    Properties:
      Groups:
      - !Ref Usergroup2
      LoginProfile:
        Password: !Ref 'Password' 
        PasswordResetRequired: 'true'
      UserName: Claudio-C
  Usergroup3:
    Type: AWS::IAM::Group
    Properties:  
      GroupName: CheetahNAS-Financial-GroupOperations-Team
      ManagedPolicyArns:
        - arn:aws:iam::362013628963:policy/Billing_Deny
        - arn:aws:iam::362013628963:policy/ec2-Allow-Region-us-east-1
  Users7:      
    Type: AWS::IAM::User          
    Properties:
      Groups:
      - !Ref Usergroup3
      LoginProfile:
        Password: !Ref 'Password' 
        PasswordResetRequired: 'true'
      UserName: Narcisse
  Users8:
    Type: AWS::IAM::User          
    Properties:
      Groups:
      - !Ref Usergroup3
      LoginProfile:
        Password: !Ref 'Password' 
        PasswordResetRequired: 'true'
      UserName: idriss   
#  AccessKey
  Keypairs1:
    Type: AWS::IAM::AccessKey
    Properties: 
      UserName: !Ref 'Users1'
  Keypairs2:
    Type: AWS::IAM::AccessKey
    Properties: 
      UserName: !Ref 'Users2'
  Keypairs3:
    Type: AWS::IAM::AccessKey
    Properties: 
      UserName: !Ref 'Users3'
  Keypairs4:
    Type: AWS::IAM::AccessKey
    Properties: 
      UserName: !Ref 'Users4'
  Keypairs5:
    Type: AWS::IAM::AccessKey
    Properties: 
      UserName: !Ref 'Users5'

  IAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: IAM role Managed Policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
            - iam:trustedadvisor
          Resource: "*"
  IAMRole:
    Type: 'AWS::IAM::Role'
    DependsOn:
      - IAMManagedPolicy
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${TrustedAccountId}:user/admin'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::362013628963:policy/cross-account
      Tags:
        - Key: Name
          Value: TrustAccess

  NASFinancialClientsS3Bucket:
    Type: 'AWS::S3::Bucket'
    # Description: #S3 bucket with default encryption
    Properties:
      BucketName: clients.privdata.bucket
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRule
            Prefix: glacier
            Status: Enabled
            ExpirationInDays: '1825'
            Transitions:
              - TransitionInDays: 30
                StorageClass: GLACIER
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: KMS-KEY-ARN
    DeletionPolicy: Delete
    
Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
  PublicSubnet1:
    Description: The subnet ID to use for public web servers
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-Pub1SubnetID' #replacing a string
  PublicSubnet2:
    Description: The subnet ID to use for public web servers
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-Pub2SubnetID' #replacing a string

  PrivateSubnet1:
    Description: The subnet ID to use for public web servers
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-Priv1SubnetID' #replacing a string
  PrivateSubnet2:
    Description: The subnet ID to use for public web servers
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-Priv2SubnetID' #replacing a string
  PrivateSubnet3:
    Description: The subnet ID to use for public web servers
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub '${AWS::StackName}-Priv3SubnetID' #replacing a string
  PrivateSubnet4:
    Description: The subnet ID to use for public web servers
    Value: !Ref PrivateSubnet4
    Export:
      Name: !Sub '${AWS::StackName}-Priv4SubnetID' #replacing a string
  # WebServerSecurityGroup:
  #   Description: The security group ID to use for public web servers
  #   Value: !GetAtt 
  #     - WebServerSecurityGroup
  #     - GroupId
  #   Export:
  #     Name: !Sub '${AWS::StackName}-SecurityGroupID'
  PrivateRouteTable:     
    Description: The route table ID
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-PrivateRouteTableID'
  PublicRouteTable:     
    Description: The route table ID
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-PublicRouteTableID'